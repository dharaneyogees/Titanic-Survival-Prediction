# -*- coding: utf-8 -*-
"""Titanic-Survival-Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wyQ2NC3J7QAajHuRuyFgU-iRnNBeCacN
"""

!pip install pandas numpy scikit-learn openpyxl joblib

"""# **1. Import Libraries:**"""

import pandas as pd
import numpy as np
train=pd.read_csv('/content/tested.csv')
test=pd.read_csv('/content/tested.csv')
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import joblib

"""# **2. Load Excel Data:**"""

df = pd.read_csv('/content/tested.csv')  # Path to the file in Colab

df.head()

train

test

"""# **3. Exploring Data**"""

df.info()

df.describe()

df.isnull().sum()

#importing libraries for visualization
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style='whitegrid')

plt.figure(figsize=(10,4))
sns.histplot(df['Age'],bins=30,kde=True)
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

train["Survived"].value_counts().plot.pie(autopct="%1.1f%%", labels=["Not Survived", "Survived"], colors=["pink", "skyblue"],shadow=True)
plt.title("Overall Survival Percentage")
plt.ylabel("")  # Remove y-label for aesthetics
plt.show()

# Bar Plot: Survival Rate by Class
plt.figure(figsize=(8, 5))
ax=sns.barplot(x=train["Pclass"], y=train["Survived"]*100,hue=train['Sex'],ci=None,palette="dark:#5A9_r")
# Add value labels on top of bars
for container in ax.containers:
    ax.bar_label(container, fmt="%.1f%%", fontsize=9)  # Format as percentage
plt.xlabel("Passenger Class",fontsize=12)
plt.ylabel("Survival Rate %",fontsize=12)
plt.title("Survival Rate %age by Passenger Class",fontsize=14)
plt.xticks(fontsize=12)
plt.show()

# Violin Plot: Age Distribution among Survived & Not Survived
sns.violinplot(x="Survived", y="Age", hue="Sex",data=train, palette="coolwarm", inner="quartile")
plt.title("Age Distribution of Survived & Non-Survived Passengers")
plt.xlabel('Survival')
plt.show()

# Box Plot: Fare Distribution Across Passenger Classes
sns.boxplot(x="Pclass", y="Fare", data=train, palette="pastel")
plt.title("Fare Distribution Across Classes")
plt.show()

# Swarm Plot: Fare vs Survival
sns.swarmplot(x="Survived", y="Fare",hue="Pclass",data=train, palette="coolwarm")
plt.title("Fare vs Survival")
plt.xlabel('Survival')
plt.show()

# Stacked Bar Chart: Survival by Embarkation
embarked_survival = train.groupby("Embarked")["Survived"].value_counts(normalize=True).unstack()*100
embarked_survival.plot(kind="bar", stacked=True, color=["grey", "yellow"])
plt.xlabel("Embarkation Port")
plt.ylabel("Proportion")
plt.title("Survival Rate by Embarkation Port")
plt.legend(["Not Survived", "Survived"])
plt.show()

# Heatmap: Correlation of Survival with Other Features
plt.figure(figsize=(8,6))
sns.heatmap(train[["Survived", "Pclass", "Fare","Age"]].corr(), annot=True, cmap="flare", fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.show()

"""# **4. Data Preprocessing**"""

from sklearn.preprocessing import LabelEncoder

# handling missing values
df['Age'].fillna(df['Age'].median(),inplace=True)
df['Embarked'].fillna(df['Embarked'].mode()[0],inplace=True)
#df['Cabin'].fillna('U',inplace=True)

le=LabelEncoder()
df['Sex']=le.fit_transform(df['Sex'])
df['Embarked']=le.fit_transform(df['Embarked'])

df.head()

"""# **5. Feature Selection**"""

features=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']
x=df[features]
y=df['Survived']

"""# **6. Model Building**"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# spliting the data into training and tetsing sets
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

# model training
model=RandomForestClassifier(n_estimators=100,random_state=42)
model.fit(x_train,y_train)

# predictions
y_pred=model.predict(x_test)

"""# **7. Model Evaluation**"""

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

# Accuracy score
accuracy=accuracy_score(y_test,y_pred)
print('Accuracy:',accuracy)

# Classification report
report=classification_report(y_test,y_pred)
print('Classification_report:',report)

# Confusion matrix
confusion=confusion_matrix(y_test,y_pred)
print('Confusion_matrix:',confusion)

from sklearn.metrics import confusion_matrix
import seaborn as sns
import numpy as np

#plotting confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(confusion,annot=True,fmt='d',cmap='YlGnBu')#,xticklabel=['Not survivred','Survived'],yticklabels=['Not Survived','Survived'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()